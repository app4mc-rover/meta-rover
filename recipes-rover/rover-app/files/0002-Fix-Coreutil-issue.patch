diff --git a/include/roverapi/rover_utils.hpp b/include/roverapi/rover_utils.hpp
index 26c261f..5a72f97 100644
--- a/include/roverapi/rover_utils.hpp
+++ b/include/roverapi/rover_utils.hpp
@@ -35,7 +35,7 @@ namespace rover
 			 * @brief Returns a float array that contains core utilization of each core in rover's Raspberry Pi. Uses an external script called read_core_usage.py which must be installed within rover-app.
 			 * @return core_util (float) is an array that contains core usage of each core in rover's Raspberry Pi.
 			 */
-			float * getCoreUtilization (void);
+			void getCoreUtilization (float utilCores[4]);
 
 			/**
 			 * @brief Returns whether the wlan0 interface is on (1) or off (0).
diff --git a/src/roverapi/rover_utils.cpp b/src/roverapi/rover_utils.cpp
index 0907098..e07a596 100644
--- a/src/roverapi/rover_utils.cpp
+++ b/src/roverapi/rover_utils.cpp
@@ -17,7 +17,7 @@
 
 #include <libraries/status_library/status_library.h>
 
-float * rover::RoverUtils::getCoreUtilization (void)
+void rover::RoverUtils::getCoreUtilization (float utilCores[4])
 {
 	FILE *fp;
 	char buffer[128];
@@ -38,10 +38,8 @@ float * rover::RoverUtils::getCoreUtilization (void)
 	//printf("buf:%s\n",buffer);
 
 	/* Parse */
-	sscanf(buffer,"[%f, %f, %f, %f]",&util[0], &util[1], &util[2], &util[3]);
+	sscanf(buffer,"[%f, %f, %f, %f]",&utilCores[0], &utilCores[1], &utilCores[2], &utilCores[3]);
 
-	/* Return */
-	return util;
 }
 
 int rover::RoverUtils::getWlanStatus (void)
diff --git a/src/tasks/cpu_logger_task.cpp b/src/tasks/cpu_logger_task.cpp
index 766b24a..a0736d8 100644
--- a/src/tasks/cpu_logger_task.cpp
+++ b/src/tasks/cpu_logger_task.cpp
@@ -47,7 +47,7 @@ void *Cpu_Logger_Task(void * arg)
 	signal(SIGTERM, Cpu_Logger_Task_Terminator);
 	signal(SIGKILL, Cpu_Logger_Task_Terminator);
 
-	float *util;
+	float util[4];
 
 	while (running_flag)
 	{
@@ -56,7 +56,7 @@ void *Cpu_Logger_Task(void * arg)
 
 		//Task content starts here -----------------------------------------------
 
-		util = r.inRoverUtils().getCoreUtilization();
+		r.inRoverUtils().getCoreUtilization(util);
 		pthread_mutex_lock(&cpu_util_shared_lock);
 			cpu_util_shared[0] = util[0];
 			cpu_util_shared[1] = util[1];
